import { Injector, NgModuleFactory, OnChanges, OnDestroy, OnInit, SimpleChanges, Type } from '@angular/core';
import { CartItem } from '../../classes/cart-item';
import { ShowcaseItem } from '../../interfaces/showcase-item';
import { CartService } from '../../services/cart.service';
/**
 * Renders items arranged in columns using a dynamic component for the item. Useful for getting started with e-commerce applications.
 *
 * @order 4
 * @howToUse "Using wider items"
 * ```html
 * <cart-showcase [items]="items" [aspectRatio]="'2:1'">
 * </cart-showcase>
 * ```
 *
 * @howToUse "Using four columns in all screen sizes bigger than 768px"
 * ```html
 * <cart-showcase [items]="items" [mCols]="4" [lCols]="4">
 * </cart-showcase>
 * ```
 *
 * @howToUse "Using a different item component"
 * ```html
 * <!-- my-component.html -->
 * <cart-showcase [items]="items" [itemComponent]="itemComponent">
 * </cart-showcase>
 * ```
 * ```typescript
 * // my-component.ts
 * export class MyComponent {
 *   itemComponent = MyCustomItemComponent;
 * }
 *
 * // my-custom-item-component.ts
 * @Component({
 *  selector: 'my-custom-item-component',
 *  template: '<div class="item-class">{{item.getName()}}</div>'
 * })
 * export class MyCustomItemComponent implements ShowcaseItem  {
 *   item: CartItem;
 * }
 *
 * // app.module.ts
 * @NgModule({
 *   // .....
 *   entryComponents: [MyCustomItemComponent],
 * })
 * export class AppModule {
 * }
 * ```
 *
 * @note {warning} If you change the `[columns]` input you must also change the sass variable that controls the component grid and
 * vice-versa. A similar procedure is required to create aspect ratios with values greater than four eg: `'1:5'`. Check the styling guide
 * for more information.
 *
 * @note {danger} The aspect ratio is the width/height proportion of the items therefore a ratio of `'2:2'` is equivalent to `'1:1'`.
 * Redundant ratios like these are removed from the source so don't try to use them.
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class CartShowcaseComponent implements OnChanges, OnInit, OnDestroy {
    private cartService;
    private _serviceSubscription;
    format: string;
    xsClass: string;
    sClass: string;
    mClass: string;
    lClass: string;
    xlClass: string;
    ratioClass: string;
    /**
     * The number of columns to display when the screen size matches phone devices.
     */
    xsCols: number;
    /**
     * The number of columns to display when the screen matches tablet devices.
     */
    sCols: number;
    /**
     * The number of columns to display when the screen matches desktop devices.
     */
    mCols: number;
    /**
     * The number of columns to display when the screen matches large desktop devices.
     */
    lCols: number;
    /**
     * The number of columns to display when the screen matches extra large desktop devices.
     */
    xlCols: number;
    /**
     * The number of columns in the grid.
     * Only update this value if you changed the columns sass variable in the library styles following the Styling guide.
     */
    columns: number;
    /**
     * An array of items to display
     */
    items: CartItem[];
    /**
     * The component to render for each item. This type means any component that implements the interface `ShowcaseItem`.
     */
    itemComponent: Type<ShowcaseItem>;
    /**
     * Optional injector for the dynamic item components. Used when you want to replace the default inherited injector for the component.
     */
    injector: Injector;
    /**
     * Optional module factory for the dynamic components. You usually get one when you manually compile modules.
     */
    moduleFactory: NgModuleFactory<any>;
    /**
     * The aspect ratio of the container of the items. A value of `1:1` means square items, `2:1` means two times wider, `1:2` two times
     * taller and so on.
     */
    aspectRatio: string;
    /**
     * Changes currency display format for the component. Overrides the value set from the service using `setLocaleFormat`.
     */
    localeFormat: string;
    private getColumnSize(value);
    constructor(cartService: CartService<any>);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CartShowcaseComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CartShowcaseComponent, "cart-showcase", never, {
    "xsCols": "xsCols";
    "sCols": "sCols";
    "mCols": "mCols";
    "lCols": "lCols";
    "xlCols": "xlCols";
    "columns": "columns";
    "itemComponent": "itemComponent";
    "aspectRatio": "aspectRatio";
    "items": "items";
    "injector": "injector";
    "moduleFactory": "moduleFactory";
    "localeFormat": "localeFormat";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1zaG93Y2FzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2FydC1zaG93Y2FzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgTmdNb2R1bGVGYWN0b3J5LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENhcnRJdGVtIH0gZnJvbSAnLi4vLi4vY2xhc3Nlcy9jYXJ0LWl0ZW0nO1xyXG5pbXBvcnQgeyBTaG93Y2FzZUl0ZW0gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3Nob3djYXNlLWl0ZW0nO1xyXG5pbXBvcnQgeyBDYXJ0U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NhcnQuc2VydmljZSc7XHJcbi8qKlxyXG4gKiBSZW5kZXJzIGl0ZW1zIGFycmFuZ2VkIGluIGNvbHVtbnMgdXNpbmcgYSBkeW5hbWljIGNvbXBvbmVudCBmb3IgdGhlIGl0ZW0uIFVzZWZ1bCBmb3IgZ2V0dGluZyBzdGFydGVkIHdpdGggZS1jb21tZXJjZSBhcHBsaWNhdGlvbnMuXHJcbiAqXHJcbiAqIEBvcmRlciA0XHJcbiAqIEBob3dUb1VzZSBcIlVzaW5nIHdpZGVyIGl0ZW1zXCJcclxuICogYGBgaHRtbFxyXG4gKiA8Y2FydC1zaG93Y2FzZSBbaXRlbXNdPVwiaXRlbXNcIiBbYXNwZWN0UmF0aW9dPVwiJzI6MSdcIj5cclxuICogPC9jYXJ0LXNob3djYXNlPlxyXG4gKiBgYGBcclxuICpcclxuICogQGhvd1RvVXNlIFwiVXNpbmcgZm91ciBjb2x1bW5zIGluIGFsbCBzY3JlZW4gc2l6ZXMgYmlnZ2VyIHRoYW4gNzY4cHhcIlxyXG4gKiBgYGBodG1sXHJcbiAqIDxjYXJ0LXNob3djYXNlIFtpdGVtc109XCJpdGVtc1wiIFttQ29sc109XCI0XCIgW2xDb2xzXT1cIjRcIj5cclxuICogPC9jYXJ0LXNob3djYXNlPlxyXG4gKiBgYGBcclxuICpcclxuICogQGhvd1RvVXNlIFwiVXNpbmcgYSBkaWZmZXJlbnQgaXRlbSBjb21wb25lbnRcIlxyXG4gKiBgYGBodG1sXHJcbiAqIDwhLS0gbXktY29tcG9uZW50Lmh0bWwgLS0+XHJcbiAqIDxjYXJ0LXNob3djYXNlIFtpdGVtc109XCJpdGVtc1wiIFtpdGVtQ29tcG9uZW50XT1cIml0ZW1Db21wb25lbnRcIj5cclxuICogPC9jYXJ0LXNob3djYXNlPlxyXG4gKiBgYGBcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiAvLyBteS1jb21wb25lbnQudHNcclxuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IHtcclxuICogICBpdGVtQ29tcG9uZW50ID0gTXlDdXN0b21JdGVtQ29tcG9uZW50O1xyXG4gKiB9XHJcbiAqXHJcbiAqIC8vIG15LWN1c3RvbS1pdGVtLWNvbXBvbmVudC50c1xyXG4gKiBAQ29tcG9uZW50KHtcclxuICogIHNlbGVjdG9yOiAnbXktY3VzdG9tLWl0ZW0tY29tcG9uZW50JyxcclxuICogIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIml0ZW0tY2xhc3NcIj57e2l0ZW0uZ2V0TmFtZSgpfX08L2Rpdj4nXHJcbiAqIH0pXHJcbiAqIGV4cG9ydCBjbGFzcyBNeUN1c3RvbUl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBTaG93Y2FzZUl0ZW0gIHtcclxuICogICBpdGVtOiBDYXJ0SXRlbTtcclxuICogfVxyXG4gKlxyXG4gKiAvLyBhcHAubW9kdWxlLnRzXHJcbiAqIEBOZ01vZHVsZSh7XHJcbiAqICAgLy8gLi4uLi5cclxuICogICBlbnRyeUNvbXBvbmVudHM6IFtNeUN1c3RvbUl0ZW1Db21wb25lbnRdLFxyXG4gKiB9KVxyXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHtcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQG5vdGUge3dhcm5pbmd9IElmIHlvdSBjaGFuZ2UgdGhlIGBbY29sdW1uc11gIGlucHV0IHlvdSBtdXN0IGFsc28gY2hhbmdlIHRoZSBzYXNzIHZhcmlhYmxlIHRoYXQgY29udHJvbHMgdGhlIGNvbXBvbmVudCBncmlkIGFuZFxyXG4gKiB2aWNlLXZlcnNhLiBBIHNpbWlsYXIgcHJvY2VkdXJlIGlzIHJlcXVpcmVkIHRvIGNyZWF0ZSBhc3BlY3QgcmF0aW9zIHdpdGggdmFsdWVzIGdyZWF0ZXIgdGhhbiBmb3VyIGVnOiBgJzE6NSdgLiBDaGVjayB0aGUgc3R5bGluZyBndWlkZVxyXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cclxuICpcclxuICogQG5vdGUge2Rhbmdlcn0gVGhlIGFzcGVjdCByYXRpbyBpcyB0aGUgd2lkdGgvaGVpZ2h0IHByb3BvcnRpb24gb2YgdGhlIGl0ZW1zIHRoZXJlZm9yZSBhIHJhdGlvIG9mIGAnMjoyJ2AgaXMgZXF1aXZhbGVudCB0byBgJzE6MSdgLlxyXG4gKiBSZWR1bmRhbnQgcmF0aW9zIGxpa2UgdGhlc2UgYXJlIHJlbW92ZWQgZnJvbSB0aGUgc291cmNlIHNvIGRvbid0IHRyeSB0byB1c2UgdGhlbS5cclxuICpcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcnRTaG93Y2FzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSBjYXJ0U2VydmljZTtcclxuICAgIHByaXZhdGUgX3NlcnZpY2VTdWJzY3JpcHRpb247XHJcbiAgICBmb3JtYXQ6IHN0cmluZztcclxuICAgIHhzQ2xhc3M6IHN0cmluZztcclxuICAgIHNDbGFzczogc3RyaW5nO1xyXG4gICAgbUNsYXNzOiBzdHJpbmc7XHJcbiAgICBsQ2xhc3M6IHN0cmluZztcclxuICAgIHhsQ2xhc3M6IHN0cmluZztcclxuICAgIHJhdGlvQ2xhc3M6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIG51bWJlciBvZiBjb2x1bW5zIHRvIGRpc3BsYXkgd2hlbiB0aGUgc2NyZWVuIHNpemUgbWF0Y2hlcyBwaG9uZSBkZXZpY2VzLlxyXG4gICAgICovXHJcbiAgICB4c0NvbHM6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIG51bWJlciBvZiBjb2x1bW5zIHRvIGRpc3BsYXkgd2hlbiB0aGUgc2NyZWVuIG1hdGNoZXMgdGFibGV0IGRldmljZXMuXHJcbiAgICAgKi9cclxuICAgIHNDb2xzOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBudW1iZXIgb2YgY29sdW1ucyB0byBkaXNwbGF5IHdoZW4gdGhlIHNjcmVlbiBtYXRjaGVzIGRlc2t0b3AgZGV2aWNlcy5cclxuICAgICAqL1xyXG4gICAgbUNvbHM6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIG51bWJlciBvZiBjb2x1bW5zIHRvIGRpc3BsYXkgd2hlbiB0aGUgc2NyZWVuIG1hdGNoZXMgbGFyZ2UgZGVza3RvcCBkZXZpY2VzLlxyXG4gICAgICovXHJcbiAgICBsQ29sczogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gZGlzcGxheSB3aGVuIHRoZSBzY3JlZW4gbWF0Y2hlcyBleHRyYSBsYXJnZSBkZXNrdG9wIGRldmljZXMuXHJcbiAgICAgKi9cclxuICAgIHhsQ29sczogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgaW4gdGhlIGdyaWQuXHJcbiAgICAgKiBPbmx5IHVwZGF0ZSB0aGlzIHZhbHVlIGlmIHlvdSBjaGFuZ2VkIHRoZSBjb2x1bW5zIHNhc3MgdmFyaWFibGUgaW4gdGhlIGxpYnJhcnkgc3R5bGVzIGZvbGxvd2luZyB0aGUgU3R5bGluZyBndWlkZS5cclxuICAgICAqL1xyXG4gICAgY29sdW1uczogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBhcnJheSBvZiBpdGVtcyB0byBkaXNwbGF5XHJcbiAgICAgKi9cclxuICAgIGl0ZW1zOiBDYXJ0SXRlbVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgY29tcG9uZW50IHRvIHJlbmRlciBmb3IgZWFjaCBpdGVtLiBUaGlzIHR5cGUgbWVhbnMgYW55IGNvbXBvbmVudCB0aGF0IGltcGxlbWVudHMgdGhlIGludGVyZmFjZSBgU2hvd2Nhc2VJdGVtYC5cclxuICAgICAqL1xyXG4gICAgaXRlbUNvbXBvbmVudDogVHlwZTxTaG93Y2FzZUl0ZW0+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25hbCBpbmplY3RvciBmb3IgdGhlIGR5bmFtaWMgaXRlbSBjb21wb25lbnRzLiBVc2VkIHdoZW4geW91IHdhbnQgdG8gcmVwbGFjZSB0aGUgZGVmYXVsdCBpbmhlcml0ZWQgaW5qZWN0b3IgZm9yIHRoZSBjb21wb25lbnQuXHJcbiAgICAgKi9cclxuICAgIGluamVjdG9yOiBJbmplY3RvcjtcclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9uYWwgbW9kdWxlIGZhY3RvcnkgZm9yIHRoZSBkeW5hbWljIGNvbXBvbmVudHMuIFlvdSB1c3VhbGx5IGdldCBvbmUgd2hlbiB5b3UgbWFudWFsbHkgY29tcGlsZSBtb2R1bGVzLlxyXG4gICAgICovXHJcbiAgICBtb2R1bGVGYWN0b3J5OiBOZ01vZHVsZUZhY3Rvcnk8YW55PjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGFzcGVjdCByYXRpbyBvZiB0aGUgY29udGFpbmVyIG9mIHRoZSBpdGVtcy4gQSB2YWx1ZSBvZiBgMToxYCBtZWFucyBzcXVhcmUgaXRlbXMsIGAyOjFgIG1lYW5zIHR3byB0aW1lcyB3aWRlciwgYDE6MmAgdHdvIHRpbWVzXHJcbiAgICAgKiB0YWxsZXIgYW5kIHNvIG9uLlxyXG4gICAgICovXHJcbiAgICBhc3BlY3RSYXRpbzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGFuZ2VzIGN1cnJlbmN5IGRpc3BsYXkgZm9ybWF0IGZvciB0aGUgY29tcG9uZW50LiBPdmVycmlkZXMgdGhlIHZhbHVlIHNldCBmcm9tIHRoZSBzZXJ2aWNlIHVzaW5nIGBzZXRMb2NhbGVGb3JtYXRgLlxyXG4gICAgICovXHJcbiAgICBsb2NhbGVGb3JtYXQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgZ2V0Q29sdW1uU2l6ZSh2YWx1ZSk7XHJcbiAgICBjb25zdHJ1Y3RvcihjYXJ0U2VydmljZTogQ2FydFNlcnZpY2U8YW55Pik7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==