import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CheckoutSettings, CheckoutType } from '../../types';
import { CartService } from '../../services/cart.service';
import { CheckoutPaypalSettings } from '../../interfaces/checkout-paypal-settings';
import { CheckoutHttpSettings } from '../../interfaces/checkout-http-settings';
import { LocaleFormat } from '../../interfaces/locale-format';
/**
 * Renders a button to initiate checkout of the cart.
 *
 * @order 6
 * @howToUse "With a custom button or projected content"
 * ```html
 * <cart-checkout [custom]="true">
 *    <button type="button" class="my-custom-class">Do checkout</button>
 * </cart-checkout>
 * ```
 *
 * @howToUse "With different text and classes"
 * ```html
 * <cart-checkout [buttonText]="'Add item'" [buttonClass]="'my-custom-class'">
 * </cart-checkout>
 * ```
 *
 * @howToUse "Using http in a protected endpoint"
 * ```html
 * <cart-checkout [service]="'http'" settings="settings">
 * </cart-checkout>
 * ```
 * ```typescript
 * export class MyComponent {
 *   settings: CheckoutHttpSettings = {
 *     method: 'POST',
 *     url: 'http://myapi.com/',
 *     options: { headers: { Authorization: 'Bearer my-auth-token' } }
 *   };
 * }
 * ```
 *
 * @howToUse "Using the PayPal service"
 * ```html
 * <cart-checkout [service]="'paypal'" settings="settings">
 * </cart-checkout>
 * ```
 * ```typescript
 * export class MyComponent {
 *  settings: CheckoutPaypalSettings = {
 *    business: 'myaccount@paypal.com',
 *    itemName: 'myMarketplaceAppCart',
 *    itemNumber: '1234',
 *    serviceName: 'MyBusiness',
 *    country: 'US'
 *  };
 * }
 * ```
 *
 * @note {warning} This component captures clicks events bubbling from its projected content. Make sure the event keeps bubbling only when
 * you want the checkout operation to start.
 *
 * @note {warning} When the `[service]` is set to `paypal` an actual PayPal button is rendered. None of the inputs `custom`, `buttonText`
 * or `buttonClass` have any effect.
 */
import * as ɵngcc0 from '@angular/core';
export declare class CartCheckoutComponent implements OnChanges, OnInit, OnDestroy {
    private cartService;
    private httpClient;
    private locale;
    private _serviceSubscription;
    private getLocaleCurrencyName;
    empty: boolean;
    cost: number;
    taxRate: number;
    shipping: number;
    httpSettings: CheckoutHttpSettings;
    paypalSettings: CheckoutPaypalSettings;
    format: LocaleFormat;
    currency: string;
    paypalLocale: string;
    /**
     * If `false` displays a default button provided by the component. When set to `true` projects the contents of the component.
     */
    custom: boolean;
    /**
     * Changes the default text of the component's button.
     */
    buttonText: string;
    /**
     * Changes the default text of the component's button.
     */
    buttonClass: string;
    /**
     * Sets the type of service to be used when initiating the checkout.
     */
    service: CheckoutType;
    /**
     * Depending on the type of the service you might need to add some configuration to it. This input allows you to change that
     * configuration.
     */
    settings: CheckoutSettings;
    /**
     * Changes currency display format for the component. Overrides the value set from the service using `setCurrencyFormat`.
     */
    localeFormat: string;
    /**
     * Emits the result of the checkout operation. If the service is set to `'log'` it emits the entire cart object including tax rates and
     * shipping info. If is set to `'http'` it emits an `HttpResponse` object with body, headers, etc as it was received by the remote server.
     *
     * > When `[service]` is set to `'paypal'` this event is never emitted.
     */
    checkout: EventEmitter<any>;
    /**
     * When the `[service]` is set to `'http'` and the checkout operation fails the thrown error can be captured using this output.
     *
     * The emitted value is the complete `HttpErrorResponse` object returned by `HttpClient` so you can inspect other properties like status
     * codes, headers, messages, etc.
     */
    error: EventEmitter<any>;
    constructor(cartService: CartService<any>, httpClient: HttpClient, locale: string);
    ngOnInit(): void;
    private updateCart(formatChange);
    private updateLocale();
    private getCurrency(locale);
    doCheckout(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CartCheckoutComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CartCheckoutComponent, "cart-checkout", never, {
    "custom": "custom";
    "buttonText": "buttonText";
    "buttonClass": "buttonClass";
    "service": "service";
    "settings": "settings";
    "localeFormat": "localeFormat";
}, {
    "checkout": "checkout";
    "error": "error";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1jaGVja291dC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2FydC1jaGVja291dC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBDaGVja291dFNldHRpbmdzLCBDaGVja291dFR5cGUgfSBmcm9tICcuLi8uLi90eXBlcyc7XHJcbmltcG9ydCB7IENhcnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2FydC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2hlY2tvdXRQYXlwYWxTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY2hlY2tvdXQtcGF5cGFsLXNldHRpbmdzJztcclxuaW1wb3J0IHsgQ2hlY2tvdXRIdHRwU2V0dGluZ3MgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2NoZWNrb3V0LWh0dHAtc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBMb2NhbGVGb3JtYXQgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2xvY2FsZS1mb3JtYXQnO1xyXG4vKipcclxuICogUmVuZGVycyBhIGJ1dHRvbiB0byBpbml0aWF0ZSBjaGVja291dCBvZiB0aGUgY2FydC5cclxuICpcclxuICogQG9yZGVyIDZcclxuICogQGhvd1RvVXNlIFwiV2l0aCBhIGN1c3RvbSBidXR0b24gb3IgcHJvamVjdGVkIGNvbnRlbnRcIlxyXG4gKiBgYGBodG1sXHJcbiAqIDxjYXJ0LWNoZWNrb3V0IFtjdXN0b21dPVwidHJ1ZVwiPlxyXG4gKiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIm15LWN1c3RvbS1jbGFzc1wiPkRvIGNoZWNrb3V0PC9idXR0b24+XHJcbiAqIDwvY2FydC1jaGVja291dD5cclxuICogYGBgXHJcbiAqXHJcbiAqIEBob3dUb1VzZSBcIldpdGggZGlmZmVyZW50IHRleHQgYW5kIGNsYXNzZXNcIlxyXG4gKiBgYGBodG1sXHJcbiAqIDxjYXJ0LWNoZWNrb3V0IFtidXR0b25UZXh0XT1cIidBZGQgaXRlbSdcIiBbYnV0dG9uQ2xhc3NdPVwiJ215LWN1c3RvbS1jbGFzcydcIj5cclxuICogPC9jYXJ0LWNoZWNrb3V0PlxyXG4gKiBgYGBcclxuICpcclxuICogQGhvd1RvVXNlIFwiVXNpbmcgaHR0cCBpbiBhIHByb3RlY3RlZCBlbmRwb2ludFwiXHJcbiAqIGBgYGh0bWxcclxuICogPGNhcnQtY2hlY2tvdXQgW3NlcnZpY2VdPVwiJ2h0dHAnXCIgc2V0dGluZ3M9XCJzZXR0aW5nc1wiPlxyXG4gKiA8L2NhcnQtY2hlY2tvdXQ+XHJcbiAqIGBgYFxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCB7XHJcbiAqICAgc2V0dGluZ3M6IENoZWNrb3V0SHR0cFNldHRpbmdzID0ge1xyXG4gKiAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAqICAgICB1cmw6ICdodHRwOi8vbXlhcGkuY29tLycsXHJcbiAqICAgICBvcHRpb25zOiB7IGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogJ0JlYXJlciBteS1hdXRoLXRva2VuJyB9IH1cclxuICogICB9O1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAaG93VG9Vc2UgXCJVc2luZyB0aGUgUGF5UGFsIHNlcnZpY2VcIlxyXG4gKiBgYGBodG1sXHJcbiAqIDxjYXJ0LWNoZWNrb3V0IFtzZXJ2aWNlXT1cIidwYXlwYWwnXCIgc2V0dGluZ3M9XCJzZXR0aW5nc1wiPlxyXG4gKiA8L2NhcnQtY2hlY2tvdXQ+XHJcbiAqIGBgYFxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCB7XHJcbiAqICBzZXR0aW5nczogQ2hlY2tvdXRQYXlwYWxTZXR0aW5ncyA9IHtcclxuICogICAgYnVzaW5lc3M6ICdteWFjY291bnRAcGF5cGFsLmNvbScsXHJcbiAqICAgIGl0ZW1OYW1lOiAnbXlNYXJrZXRwbGFjZUFwcENhcnQnLFxyXG4gKiAgICBpdGVtTnVtYmVyOiAnMTIzNCcsXHJcbiAqICAgIHNlcnZpY2VOYW1lOiAnTXlCdXNpbmVzcycsXHJcbiAqICAgIGNvdW50cnk6ICdVUydcclxuICogIH07XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBub3RlIHt3YXJuaW5nfSBUaGlzIGNvbXBvbmVudCBjYXB0dXJlcyBjbGlja3MgZXZlbnRzIGJ1YmJsaW5nIGZyb20gaXRzIHByb2plY3RlZCBjb250ZW50LiBNYWtlIHN1cmUgdGhlIGV2ZW50IGtlZXBzIGJ1YmJsaW5nIG9ubHkgd2hlblxyXG4gKiB5b3Ugd2FudCB0aGUgY2hlY2tvdXQgb3BlcmF0aW9uIHRvIHN0YXJ0LlxyXG4gKlxyXG4gKiBAbm90ZSB7d2FybmluZ30gV2hlbiB0aGUgYFtzZXJ2aWNlXWAgaXMgc2V0IHRvIGBwYXlwYWxgIGFuIGFjdHVhbCBQYXlQYWwgYnV0dG9uIGlzIHJlbmRlcmVkLiBOb25lIG9mIHRoZSBpbnB1dHMgYGN1c3RvbWAsIGBidXR0b25UZXh0YFxyXG4gKiBvciBgYnV0dG9uQ2xhc3NgIGhhdmUgYW55IGVmZmVjdC5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcnRDaGVja291dENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSBjYXJ0U2VydmljZTtcclxuICAgIHByaXZhdGUgaHR0cENsaWVudDtcclxuICAgIHByaXZhdGUgbG9jYWxlO1xyXG4gICAgcHJpdmF0ZSBfc2VydmljZVN1YnNjcmlwdGlvbjtcclxuICAgIHByaXZhdGUgZ2V0TG9jYWxlQ3VycmVuY3lOYW1lO1xyXG4gICAgZW1wdHk6IGJvb2xlYW47XHJcbiAgICBjb3N0OiBudW1iZXI7XHJcbiAgICB0YXhSYXRlOiBudW1iZXI7XHJcbiAgICBzaGlwcGluZzogbnVtYmVyO1xyXG4gICAgaHR0cFNldHRpbmdzOiBDaGVja291dEh0dHBTZXR0aW5ncztcclxuICAgIHBheXBhbFNldHRpbmdzOiBDaGVja291dFBheXBhbFNldHRpbmdzO1xyXG4gICAgZm9ybWF0OiBMb2NhbGVGb3JtYXQ7XHJcbiAgICBjdXJyZW5jeTogc3RyaW5nO1xyXG4gICAgcGF5cGFsTG9jYWxlOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIElmIGBmYWxzZWAgZGlzcGxheXMgYSBkZWZhdWx0IGJ1dHRvbiBwcm92aWRlZCBieSB0aGUgY29tcG9uZW50LiBXaGVuIHNldCB0byBgdHJ1ZWAgcHJvamVjdHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBjb21wb25lbnQuXHJcbiAgICAgKi9cclxuICAgIGN1c3RvbTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQ2hhbmdlcyB0aGUgZGVmYXVsdCB0ZXh0IG9mIHRoZSBjb21wb25lbnQncyBidXR0b24uXHJcbiAgICAgKi9cclxuICAgIGJ1dHRvblRleHQ6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQ2hhbmdlcyB0aGUgZGVmYXVsdCB0ZXh0IG9mIHRoZSBjb21wb25lbnQncyBidXR0b24uXHJcbiAgICAgKi9cclxuICAgIGJ1dHRvbkNsYXNzOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIHR5cGUgb2Ygc2VydmljZSB0byBiZSB1c2VkIHdoZW4gaW5pdGlhdGluZyB0aGUgY2hlY2tvdXQuXHJcbiAgICAgKi9cclxuICAgIHNlcnZpY2U6IENoZWNrb3V0VHlwZTtcclxuICAgIC8qKlxyXG4gICAgICogRGVwZW5kaW5nIG9uIHRoZSB0eXBlIG9mIHRoZSBzZXJ2aWNlIHlvdSBtaWdodCBuZWVkIHRvIGFkZCBzb21lIGNvbmZpZ3VyYXRpb24gdG8gaXQuIFRoaXMgaW5wdXQgYWxsb3dzIHlvdSB0byBjaGFuZ2UgdGhhdFxyXG4gICAgICogY29uZmlndXJhdGlvbi5cclxuICAgICAqL1xyXG4gICAgc2V0dGluZ3M6IENoZWNrb3V0U2V0dGluZ3M7XHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZXMgY3VycmVuY3kgZGlzcGxheSBmb3JtYXQgZm9yIHRoZSBjb21wb25lbnQuIE92ZXJyaWRlcyB0aGUgdmFsdWUgc2V0IGZyb20gdGhlIHNlcnZpY2UgdXNpbmcgYHNldEN1cnJlbmN5Rm9ybWF0YC5cclxuICAgICAqL1xyXG4gICAgbG9jYWxlRm9ybWF0OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEVtaXRzIHRoZSByZXN1bHQgb2YgdGhlIGNoZWNrb3V0IG9wZXJhdGlvbi4gSWYgdGhlIHNlcnZpY2UgaXMgc2V0IHRvIGAnbG9nJ2AgaXQgZW1pdHMgdGhlIGVudGlyZSBjYXJ0IG9iamVjdCBpbmNsdWRpbmcgdGF4IHJhdGVzIGFuZFxyXG4gICAgICogc2hpcHBpbmcgaW5mby4gSWYgaXMgc2V0IHRvIGAnaHR0cCdgIGl0IGVtaXRzIGFuIGBIdHRwUmVzcG9uc2VgIG9iamVjdCB3aXRoIGJvZHksIGhlYWRlcnMsIGV0YyBhcyBpdCB3YXMgcmVjZWl2ZWQgYnkgdGhlIHJlbW90ZSBzZXJ2ZXIuXHJcbiAgICAgKlxyXG4gICAgICogPiBXaGVuIGBbc2VydmljZV1gIGlzIHNldCB0byBgJ3BheXBhbCdgIHRoaXMgZXZlbnQgaXMgbmV2ZXIgZW1pdHRlZC5cclxuICAgICAqL1xyXG4gICAgY2hlY2tvdXQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIHRoZSBgW3NlcnZpY2VdYCBpcyBzZXQgdG8gYCdodHRwJ2AgYW5kIHRoZSBjaGVja291dCBvcGVyYXRpb24gZmFpbHMgdGhlIHRocm93biBlcnJvciBjYW4gYmUgY2FwdHVyZWQgdXNpbmcgdGhpcyBvdXRwdXQuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIGVtaXR0ZWQgdmFsdWUgaXMgdGhlIGNvbXBsZXRlIGBIdHRwRXJyb3JSZXNwb25zZWAgb2JqZWN0IHJldHVybmVkIGJ5IGBIdHRwQ2xpZW50YCBzbyB5b3UgY2FuIGluc3BlY3Qgb3RoZXIgcHJvcGVydGllcyBsaWtlIHN0YXR1c1xyXG4gICAgICogY29kZXMsIGhlYWRlcnMsIG1lc3NhZ2VzLCBldGMuXHJcbiAgICAgKi9cclxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGNvbnN0cnVjdG9yKGNhcnRTZXJ2aWNlOiBDYXJ0U2VydmljZTxhbnk+LCBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LCBsb2NhbGU6IHN0cmluZyk7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVDYXJ0KGZvcm1hdENoYW5nZSk7XHJcbiAgICBwcml2YXRlIHVwZGF0ZUxvY2FsZSgpO1xyXG4gICAgcHJpdmF0ZSBnZXRDdXJyZW5jeShsb2NhbGUpO1xyXG4gICAgZG9DaGVja291dCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==